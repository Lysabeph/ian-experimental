#!/usr/bin/bash

UPDATE_TIME=10

function compare_output {
    # Reads the contents of the previous output into the program.
    
    mapfile -t prev_output < ~/test/git/Project-I.A.N./Testing/previous_output
    unset prev_output[-1] # Removes the 'ps -u $USER -o pid,cmd' process.
    
    mapfile -t new_output < ~/test/git/Project-I.A.N./Testing/newest_output
    unset new_output[-1] # Removes the 'ps -u $USER -o pid,cmd' process.

    offset=0

    for element in ${!new_output[@]}; do
    
        while true; do
            prev_proc=(${prev_output[$((element + offset))]})
            new_proc=(${new_output[$element]})
            
            if [ "$prev_proc" == "$new_proc" ]; then
                break
            else                
                # Gets the pid (only) of the previous process being compared at the time.
                declare -i prev_pid=${prev_proc[0]}
                # If prev_output < new_output, empty array elements default to a zero value.
                # Setting the value larger than the max pid means new processes have a pid
                # less than the non-existant previous process.
                if [ "$prev_pid" -eq "0" ]; then
                    prev_pid=$(($(cat /proc/sys/kernel/pid_max) + 1))
                fi
                
                # Gets the pid (only) of the new process being compared at the time.
                declare -i new_pid=${new_proc[0]}
                
                # Determines if a new process was started or if an old process was stopped.            
                if [ "$new_pid" -lt "$prev_pid" ]; then
                    ((offset--))
                    echo New process detected! ${new_proc[@]}
                    break
                elif [ "$new_pid" -gt "$prev_pid" ]; then
                    ((offset++))
                    echo Old process stopped! ${prev_proc[@]}
                fi
            fi
        done
    done
    
    # Finds any old processes that were started after the now most recently started process.
    for item in "${prev_output[@]:$((element + offset + 1))}"; do
        echo Old process stopped! $item
    done
}

ps -u $USER -o pid,cmd > ~/test/git/Project-I.A.N./Testing/previous_output

while true; do
    ps -u $USER -o pid,cmd > ~/test/git/Project-I.A.N./Testing/newest_output
    compare_output
    echo ~~~
    sleep $UPDATE_TIME
    cat ~/test/git/Project-I.A.N./Testing/newest_output > ~/test/git/Project-I.A.N./Testing/previous_output
done
