#!/bin/bash

# Defines all constants.
UPDATE_TIME=10
SAVE_PATH=~/git/Project-I.A.N./Testing
DATABASE=$SAVE_PATH/test.db
COMMAND="ps -u $USER -o "%p///%c///" -o cmd --no-headers"
BREAK_STRING="///"

# Defines all global data stores.
declare -A open_program_dict

# Checks the path for the program exists.
if [ ! -d $SAVE_PATH ]; then
    mkdir $SAVE_PATH
fi

# Checks that the database has been created.
if [ ! -f $DATABASE ]; then
    sqlite3 $DATABASE < create.sql
fi

# Checks that there is a latest time file for use when updating the database.
if [ ! -f $SAVE_PATH/latest_time ]; then
    echo 0 >latest_time
fi

# Creates a close log for all programs if the main program is terminated.
function exit_trap_cleanup () {
    current_time=$(date +"%s")

    for pid in "${!open_program_dict[@]}"; do
        name=${open_program_dict[$pid]}
        # Remove any unwanted white space.
        name=$( echo "$name" | awk '{gsub(/^ +| +$/,"")} {print $0}' )
        pid=$( echo "$pid" | awk '{gsub(/^ +| +$/,"")} {print $0}' )

        echo $( sqlite3 $DATABASE "
            INSERT INTO ProgramLogs(ProgramName, PID, DateTime, OpenClose)
            VALUES('$name', '$pid', '$current_time', 'Close');" )
    done
    # Updates the database.
    ./textdatarunnerdb
}

trap exit_trap_cleanup EXIT

function compare_output () {
    integers=(1 2 3)
    mapfile -t prev_output < $SAVE_PATH/previous_output # Reads the contents of the previous output from the file.
    #unset prev_output[-1] # Removes the 'ps' process.
    mapfile -t new_output < $SAVE_PATH/newest_output # Reads the contents of the newest output from the file.
    #unset new_output[-1] # Removes the 'ps' process.
    offset=0 # Initiates the offset counter with a default value (usually 0).
    local -a log

    # Loops through each record of the $new_output.
    for element in ${!new_output[@]}; do

        if echo "${new_output[$element]}" | grep "$COMMAND"; then
            continue
        fi

        prev_record=()
        new_record=()

        if [[ $( grep -o "$BREAK_STRING" <<< "${new_output[$element]}" | wc -l ) -ne  "2" ]]; then
            continue
        fi
        
        for i in "${integers[@]}"; do
            prev_record+=( $( echo ${prev_output[ $(( element + offset )) ]} | awk -F'///' -v i=$i '{print $i}' ) )
            new_record+=( $( echo ${new_output[ $element ]} | awk -F'///' -v i=$i '{print $i}' ) )
        done

        # Loops to catch all new and old processes.
        while true; do

            # Moves onto the next record of $new_output if the new and previous records are the same.
            if [ "$prev_record" == "$new_record" ]; then
                break
            # Finds out if a new process was started or an old one was ended.
            else
                local -i prev_pid=${prev_record[0]} # Index 0 of any record is a process' PID.

                # PID of 0 means $prev_output has fewer records than $new_output.
                if [ "$prev_pid" -eq "0" ] || [ -z "$prev_pid" ]; then
                    prev_pid=$(( $( cat /proc/sys/kernel/pid_max ) + 1 ))
                fi

                local -i new_pid=${new_record[0]}

                # Checks if a new process was started.
                if [ "$new_pid" -lt "$prev_pid" ]; then
                    (( offset-- )) # Changes the offset counter to compensate.
                    log=( "${log[@]}" "${new_output[ $(( element )) ]} ///$( date +"%s" ) ///Open" ) # Logs the changes.
                    break # Moves onto the next record.
                # Checks if an old process was stopped.
                elif [ "$new_pid" -gt "$prev_pid" ]; then

                    if ! echo "${new_output[$element]}" | grep "$COMMAND"; then
                        log=( "${log[@]}" "${prev_output[ $(( element + offset )) ]} ///$(date +"%s") ///Close" ) # Logs the changes.
                    fi

                    (( offset++ )) # Changes the offset counter to compensate.
                    prev_record=()
                    for i in "${integers[@]}"; do
                        prev_record+=( $( echo ${prev_output[ $(( element + offset )) ]} | awk -F'///' -v i=$i '{print $i}' ) )
                    done
                    echo ${prev_record[0]}
                    # The loop doesn't break, meaning any more old proceses are logged.
                fi
            fi
        done
    done

    echo c1

    # Finds old processes started after the most recently started process (if $prev_output is longer than $new_output).
    for _ in "${prev_output[@]:$((element + offset + 1))}"; do
        log=( "${log[@]}" "${prev_output[ $(( element + offset )) ]} ///$(date +"%s") ///Close" ) # Logs the changes.
    done

    # Removes all the unnecessary records from the data.
    # Loops through each logged record.
    integers+=(4 5)

    echo "-----LOGS-----"
    for i in "${log[@]}"; do
        echo $i
    done
    echo "-----LOGS-----"

    record=()

    for item in "${!log[@]}"; do
        unset present

        # Maybe unnecessary but will catch if the command makes it this far.
        if echo "${log[$item]}" | grep "$COMMAND"; then
            unset log[$item]
            continue
        fi

        for i in "${integers[@]}"; do
            record+=( $( echo ${log[ $item ]} | awk -F'///' -v i=$i '{print $i}' ) )
        done

        log_name=${record[1]}
        log_name=$( echo "$log_name" | awk '{gsub(/^ +| +$/,"")} {print $0}' )
        log_pid=${record[1]}
        log_pid=$( echo "$log_pid" | awk '{gsub(/^ +| +$/,"")} {print $0}' )

        # Loops through each open program.
        for pid in "${!open_program_dict[@]}"; do
            pname=${open_program_dict["$pid"]}

            # Checks if the program is already open.
            if [[ "$pname" == "$log_name" ]]; then
                local present=true

                # If the PID is the same as the open one, the program must have closed.
                if [[ "$log_pid" == "$pid" ]]; then
                    unset open_program_dict["$pid"]
                # If the PID is different, a child process of the open process must have started (not needed).
                else
                    unset log[$item]
                fi

                break
            fi
        done

        # If the program wasn't already open.
        if ! [ $present ]; then

            # If the record is a new process, add it to the array of open programs.
            if [[ "${record[-1]}" == "Open" ]]; then
                open_program_dict["$log_pid"]="$log_name"

            # Otherwise, it's a close process for a program that isn't open (a child process for example).
            else
                unset log[$item]
            fi
        else
            unset present # Removes the value stored as $present.
        fi
    done

    echo c2

    echo "~~~~~LOGS~~~~~"
    for i in "${log[@]}"; do
        echo $i
    done
    echo "~~~~~LOGS~~~~~"

    record=()

    # Loops through the logged records again now that all unnecessary records have been removed.
    for item in "${log[@]}"; do

        for i in "${integers[@]}"; do
            record+=( $( echo $item | awk -F'///' -v i=$i '{print $i}' ) )
        done

        #pid=${record[0]}
        #name=${record[1]} # This isn't guaranteed but how many programs have a 'Â¬' in their name?
        name=$( echo "${record[0]}" | awk '{gsub(/^ +| +$/,"")} {print $0}' ) # Removes unwanted white space.
        pid=$( echo "$record[1]" | awk '{gsub(/^ +| +$/,"")} {print $0}' )
        command=${record[@]:2:${#record[@]}-2} # This should be index 2 but this cannot be guaranteed.
        current_time=${record[-2]}
        state=${record[-1]}
        # Creates an array of all the programs on the machine that have been used.
        programs=$( sqlite3 $DATABASE "
            SELECT Programs.ProgramName
            FROM Programs;" )

        # Adds all new programs to the database.
        if ! [[ "${programs[*]}" == *"$name"* ]]; then

            echo $( sqlite3 $DATABASE "
                INSERT INTO Programs(ProgramName, TimesRun, TotalRunTime)
                VALUES('$name', 0, 0);" )
        fi
        
        # Inserts the record into the database.
        echo $( sqlite3 $DATABASE "
            INSERT INTO ProgramLogs(ProgramName, PID, DateTime, OpenClose)
            VALUES('$name', '$pid', '$current_time', '$state');" )
    done

    echo c3
}

# Gets the running processes when the program first runs.
$COMMAND > $SAVE_PATH/previous_output

# Loops indefinitely.
while true; do
    echo ~~~
    # Gets the currently running processes.
    $COMMAND > $SAVE_PATH/newest_output
    compare_output # The function call for the main computation.

    if [ -f $SAVE_PATH/open_programs ]; then
        rm $SAVE_PATH/open_programs
    fi

    for pid in "${!open_program_dict[@]}"; do
        echo \'${open_program_dict["$pid"]}\' \"$pid\" >>open_programs
    done

    sleep $UPDATE_TIME # The delay between updates.
    cat $SAVE_PATH/newest_output > $SAVE_PATH/previous_output # Re-writes the newest and previous files.
done
